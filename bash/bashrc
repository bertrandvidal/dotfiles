# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
export BASH_SILENCE_DEPRECATION_WARNING=1

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# setup ls color properly
export LSCOLORS=ExFxBxDxCxegedabagacad

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

export TERM=xterm-256color

if [ -d ~/Library/Python/2.7/bin  ]; then
    PATH=$PATH:~/Library/Python/2.7/bin
fi

if [ -d ~/Library/Python/3.7/bin  ]; then
    PATH=$PATH:~/Library/Python/3.7/bin
fi

alias vi='vim'
alias ll='ls -alh --color'
if [ `uname` = "Darwin" ]; then
    alias ll='ls -AlhG'
fi
alias l='ll'
alias grep='grep --colour'
alias egrep='egrep --colour'
alias ntl='nautilus ./ 2>/dev/null &'
alias vbash='vi ~/.bashrc'
alias srcbash='. ~/.bashrc'
alias setbg="awsetbg -f $HOME/Pictures/bg.jpg"
alias vawesome="vi ~/.config/awesome/rc.lua"
alias openid='echo http://bvidal-ltutech-com.myopenid.com/'
alias vgit='vi ~/.gitconfig'
alias dmesg='dmesg -T'
alias generate_password='< /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-8};echo;'
alias exit='say peace out; \exit'

# crowdtwist specifics
export COMPOSE_HTTP_TIMEOUT=500
alias dc="docker-compose -f ~/crowdtwist/docker/docker-compose.yml"
alias jump='ssh bvidal@shell01.crowdtwist.com'
alias auth='cd ~/tools/ && java -classpath ./ Authenticator.Main /Users/bertvidal/.google_authenticator'
alias unmount-web-app="diskutil unmountDisk ~/crowdtwist/git/web"
alias mount-web-app="sshfs root@127.0.0.1:/opt/crowdtwist/ ~/crowdtwist/git/web -o reconnect -o volname=ct-server -C -p $(docker inspect --format='{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}' web 2> /dev/null)"


if [ -f /Users/bertvidal/crowdtwist/docker/local.env.sh ];
  then
    launchctl setenv CT_ENVIRONMENT local
    launchctl setenv CT_DOMAIN local
    export CT_ENVIRONMENT=local
    export CT_DOMAIN=local
fi

function utc(){
    date -u +"%Y-%m-%dT%H:%M:%S"
}

function title_iterm(){
    echo -ne "\033]0;${*}\007"
}

function dc_bash(){
  docker exec -ti $1 bash
}

function dc_log(){
  docker exec $1 tail -n 200 -f /root/output.log
}

function dc_restart(){
  docker exec $1 /root/restart.sh
}

function dc_rebuild(){
  docker exec $1 rebuild
}

function gtest() {
 # run gradle tess
 pushd ~/crowdtwist/git/J > /dev/null 2>&1
 for m in $*
   do
     ./gradlew modules:$m:clean modules:$m:test modules:$m:installApp -S --refresh-dependencies --rerun-tasks
   done
 popd > /dev/null 2>&1
}

# execute command as nobody
ndo() {
    sudo -u nobody bash -c ". /etc/profile.d/crowdtwist.sh; . /etc/profile.d/sqlplus.sh; $*"
}

# retrieve conf values from configuration service
ctconfig(){
    curl "https://config-$1.crowdtwist.com/configs?prefix=$2" | python -m json.tool
}

# utility functions

function senv(){
  ENV_DIR=env
  [ $# -eq 1 ] && ENV_DIR=$1
  source $ENV_DIR/bin/activate
}

# create and source a virtualenv in the current directory
function create_env(){
  ENV_DIR=env-$RANDOM
  [ $# -eq 1 ] && ENV_DIR=$1
  virtualenv --distribute $ENV_DIR && source $ENV_DIR/bin/activate
}

# create a dir and cd into it
function mkcd(){
  mkdir -p $1 && cd $1
}

# grep the first parameter un ps aux
function psgp(){
 ps faux | grep -v grep | grep -i $1
}


# recursively grep the first argument
function rgp(){
 egrep -rniI "$1" *
}

# kill a process by name
function killbyname(){
 kill `ps aux | grep $1 | grep -v grep | awk '{print $2}'`
}

# search a word on google
function google(){
query=
for word in $*
do
  query="${query}+${word}"
done
 x-www-browser http://www.google.com/search?q=$query >/dev/null &
}

# yay or nay command
function yon() {
    RESULT=$?
    COMMAND=`which say 2>/dev/null`
    [ $? -eq 1 ] && COMMAND=`which echo`
    [ $RESULT -eq 0 ] && $COMMAND "GREAT SUCCESS" || $COMMAND "YOU FAILED"
}

#kill process holding the specified file
function fdkill(){
  lsof $1 | grep -v PID | kill -9 `awk '{print $2}'`
}


# allows to grep the parameter in any python file
function pygrep(){
 SEARCH_PATH="."
 [ $# -gt 1 ] && SEARCH_PATH=$2
 find $SEARCH_PATH -name "*.py" -not -path "./env/*" -and -not -path "./*egg*/*" -exec egrep --color -in $1 {} +
}

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi
if [ -f /usr/local/etc/bash_completion.d/docker-compose ]; then
    . /usr/local/etc/bash_completion.d/docker-compose
fi

# dot file functions
[ -f ~/.dotfile.sh ] && source ~/.dotfile.sh

# git/prompt file
GIT_PROMPT=''
if [ -f ~/.git.bash ]; then
    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWUPSTREAM="auto verbose git legacy name"
    GIT_PS1_SHOWCOLORHINTS=1
    source ~/.git.bash
    GIT_PROMPT='$(__git_ps1 "[%s]")'
fi

# ssh agent
[ -f ~/.ssh/id_rsa ] && ssh-add -K ~/.ssh/id_rsa 1>/dev/null 2>&1

# add bash to wakatime - https://wakatime.com/help/plugins/terminal
[ -f ~/github/bash-wakatime/bash-wakatime.sh ]  && source ~/github/bash-wakatime/bash-wakatime.sh;

# pythonrc for completion and history
[ -f $HOME/.pythonrc.py ] && export PYTHONSTARTUP=~/.pythonrc.py

# (env)[clock]user@host:[git_status]cwd$
CHROOT='${debian_chroot:+($debian_chroot)}'
# Handle md5 bin in linux vs OSX
[ `which md5sum` ] && MD5_BIN=md5sum || MD5_BIN=md5
# md5 hostname, take last 2 bytes (value between 0 and 255) = color of hostname
HOST_COLOR=`printf "\[\033[1;38;5;%dm\]" "$((0x$(hostname | $MD5_BIN | cut -f1 -d' ' | tr -d '\n' | tail -c2)))"`

cyan='\[\033[0;36m\]'
RED='\[\033[1;31m\]'
GREEN='\[\033[1;32m\]'
green='\[\033[0;32m\]'
NC='\[\033[0m\]'
export PS1="$CHROOT$cyan[\A]$RED\u$NC@$HOST_COLOR\H$NC:$green$GIT_PROMPT$NC\W\$ "

# CrowdTwist Stuff
if [ -f /etc/tns/tnsnames.ora ];
then
	alias npm="echo Don\'t use npm, use ied && echo > /dev/null"
	export IOTK_CONF=/opt/crowdtwist/conf/iotk/local/iotk_conf.php
	export IOTK_SERVER_ENVIRONMENT=local
	export CT_ENVIRONMENT=local
	export CT_DOMAIN=local
	export TNS_ADMIN=/etc/tns
	export CT_SITE_DOMAIN=crowdtwist.com
	export CT_CLIENT_ID=2
	export CT_CLIENT_DOMAIN=rosigolan.crowdtwist.com
	export CT_SITE_ID=1
	export IED_CACHE_DIR=/opt/crowdtwist/.ied_cache
	export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/crowdtwist/app/bin:/root/bin:/usr/lib/oracle/12.1/client64/bin
	. iset crowdtwist > /dev/null 2>&1
	. testsite > /dev/null 2>&1
	export NLS_LANG=American_America.AL32UTF8
	# Oracle sqlplus setup
	ORACLE_HOME=/usr/lib/oracle/12.1/client64
	LD_LIBRARY_PATH=/usr/lib/oracle/12.1/client64/lib
	export ORACLE_HOME
	export LD_LIBRARY_PATH
	export PATH
	DISABLE_AUTO_UPDATE=true
    cd /opt/crowdtwist
fi

export JENV_ROOT="/usr/local/Cellar/jenv/"

if which jenv > /dev/null 2>&1;
	then eval "$(jenv init -)";
fi

# Docker environmental variables
export SFTP_UID=501
export J_REPO_PATH=/Users/bertvidal/crowdtwist/git/J
export USER_FILES_PATH=/Users/bertvidal/crowdtwist/docker_files
export SFTP_DIRECTORY=/Users/bertvidal/crowdtwist/docker_sftp
export WEB_REPO_PATH=$HOME/crowdtwist/git/web
